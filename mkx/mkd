#!/bin/bash
# vim:ts=4:sw=4:expandtab

############################################################
# NAME
#     mkd - a toy for make and deploy targets.
#
# SYNOPSIS
#     mkd
#     mkd [ -f makefile ] [ -C directory ] [ targets ] ...
# 
#     debug=on mkd ...
#
# AUTHORS
#     neiku project <ku7d@qq.com> 
#
# SEE ALSO
#     mkxrc_targets
#     mkxrc_modules
#     mkxrc_configs
#
# VERSION
#     2015/11/21: 支持命令行或者makefile中OUTPUT定义的target
#                 支持-f选项指定自定义makefile
#                 支持-C选项指定自定义make目录
#     2015/11/22: 支持绝对/相对目录递归mkd
#     2015/11/25: 支持部署路径跟着target配置走，独立于module
#                 支持可配置登录方式(目前只支持rsa)
#                 支持自定义make前/后执行命令(pre/post-make)
#                 支持deploy前/后执行命令(pre/post-deploy)
#     2015/11/26: 支持忽略未配置target
#     2015/11/28: 支持使用mkm查找target(project/global/system级别)
#                 支持使用mkm查找module(project/global/system级别)
#                 支持使用mkm查找config(project/global/system级别)
#     2015/12/03: 支持本地部署模块(local module)
#     2015/12/05: 支持基于密码登录的远程部署模块(passwd module)
#     2015/12/06: 支持非make编译的target(例如配置文件)
#     2015/12/11: 支持使用mk工具编译target
#     2015/12/23: 支持模式匹配target
#
############################################################

# target(*) <-----> module(1) <-----> deploy destination(1)

cmdline="$*"
targets=""
makedir="`pwd`"
makefile=""
temp=$(getopt -o "f:C:" --long "" -n "$0" -- "$@")
if [ $? != 0 ] ; then
    echo "Usage: $0 [ -f makefile ] [ -C directory ] [ targets ] ..." >&2
    exit 1
fi
eval set -- "$temp"
while true
do
    case "$1" in
        -C) makedir="$2" ;  shift 2 ;;
        -f) makefile="$2" ; shift 2 ;;
        --) shift ; break ;;
        *)  echo "parse options error!" >&2 ; exit 1 ;;
    esac
done
mklog debug "makdir-cmdline:[$makedir], makefile-cmdline:[$makefile], args-remained:[$*]"

if [ -z "$makefile" -a -z "`ls $makedir/{GNUmakefile,makefile,Makefile} 2>/dev/null`" ] ; then
    # makefile not found, maybe none-make target (from cmdline)
    targets="$*"
    if [ -z "$targets" ] ; then
        # default targets is regular file in `makedir`
        targets="`find "$makedir" -maxdepth 1 -type f -exec basename '{}' \; 2>/dev/null`"
    fi
    if [ -z "$targets" ] ; then
        mklog error "none-make targets not found, cmdline:[$cmdline]"
        exit 1
    fi
    mklog debug "targets(none make):[$targets]"
else
    # recover origin args for need-make target
    eval set -- "$cmdline"

    # get make directory
    makedir="`make $* -n -p 2>/dev/null | grep '^CURDIR :=' | tail -n1 | cut -c11-`"
    if [ -z "$makedir" ] ; then
        mklog error "make directory not found, make args:[$*]"
        exit 1
    fi
    mklog debug "makedir:[$makedir]"

    # maybe mkd for sub directorys
    submakedirs="`make $* -n -p 2>/dev/null | grep '^DIRS =' | tail -n1 | cut -c8-`"
    mklog debug "submakedirs=$submakedirs"
    if [ -n "$submakedirs" ] ; then
        for subdir in $submakedirs
        do
            if [ "${subdir:0:1}" = "/" ] ; then
                mkd -C $subdir
            else
                mkd -C $makedir/$subdir
            fi
        done
        mklog debug "mkd for directorys end"
        exit 0
    fi

    # get rgets from cmdline
    targets="`make $* -n -p 2>/dev/null | grep '^MAKECMDGOALS :=' | cut -c17-`"
    if [ -z "$targets" ] ; then
        # default targets from OUTPUT var in makefile
        targets="`make $* -n -p 2>/dev/null | grep '^OUTPUT =' | cut -c10-`"
    fi
    if [ -z "$targets" ] ; then
        mklog error "need-make targets not found, make args:[$*]"
        exit 1
    fi
    mklog debug "targets(need make):[$targets]"

    # make targets
    mk $*
    if [ $? -ne 0 ] ; then
        exit 1
    fi
fi

# deploy targets
for target in $targets
do
    # .so target is specail
    if expr match "$target" ".*\.so$" >/dev/null 2>&1 ; then
        if ! expr match "$target" "^lib" >/dev/null 2>&1 ; then
            target="lib$target"
        fi
    fi
    # .a target is specail
    if expr match "$target" ".*\.a$" >/dev/null 2>&1 ; then
        if ! expr match "$target" "^lib" >/dev/null 2>&1 ; then
            target="lib$target"
        fi
    fi

    # find target's module
    module=""; hostpath="";
    eval `mkm find target $target \
          | awk '{printf "module=%s; hostpath=%s;" \
                         ,       $1,          $2}'`
    if [ -z "$module" ] ; then
        eval `mkm find targetreg $target \
             | awk '{printf "module=%s; hostpath=%s;" \
                            ,       $1,          $2}'`
        if [ -z "$module" ] ; then
            mklog error "module not found, target:[$target]"
            continue
        fi
        mklog debug "module found in targetreg, target:[$target]"
    fi 

    # find module's info
    mtype=""; username=""; rsapkey=""; hostname=""; hostport="";
    eval `mkm find module $module \
          | awk '{printf "mtype=%s; username=%s; rsapkey=%s; hostname=%s; hostport=%s;" \
                         ,     $2,          $3,         $4,          $5,          $6}'`
    mklog debug "target:[$target], module:[$module], mtype:[$mtype]," \
                "username:[$username], rsa-private:[$rsapkey]," \
                "hostname:[$hostname], hostport:[$hostport]," \
                "hostpath:[$hostpath], makedir:[$makedir]"
    if [ "$mtype" != "rsa" -a "$mtype" != "local" -a "$mtype" != "passwd" ] ; then
        mklog error "module type unsupported, type:[$mtype]," \
                    "supported type:[rsa, local, passwd], target:[$target]"
        exit 1
    fi

    # do deploy
    mkrun pre-deploy $target
    case "$mtype" in
        rsa)
            if [   -z "$username" -o -z "$rsapkey" \
                -o -z "$hostname" -o -z "$hostport" -o -z "$hostpath" ]
            then
                mklog error "rsa module not ok, target:[$target], module:[$module]"
                exit 1
            fi
            scp -C -i $rsapkey -P $hostport "$makedir/$target" $username@$hostname:$hostpath
            ;;
        local)
            cp -v "$makedir/$target" $hostpath
            ;;
        passwd)
            if [   -z "$username" -o -z "$rsapkey" \
                -o -z "$hostname" -o -z "$hostport" -o -z "$hostpath" ]
            then
                mklog error "passwd module not ok, target:[$target], module:[$module]"
                exit 1
            fi
            mkscpto "$makedir/$target" $username $rsapkey $hostname $hostport $hostpath
            ;;
        *)
            mklog error "module type unsupported, type:[$mtype]," \
                        "supported type:[rsa, local, passwd]"
            exit 1
            ;;
    esac
    mkrun post-deploy $target
done
