#!/bin/bash
# vim:ts=4:sw=4:expandtab

############################################################
# NAME
#     drun - dox's tool for run command on remote host
#
# SYNOPSIS
#     drun [ options ] host
#
#     debug=on drun ...
#
# AUTHORS
#     neiku project <ku7d@qq.com>
#
# SEE ALSO
#     doxrc_hosts
#
# VERSION
#     2016/04/02: 支持一次性执行普通命令(passwd)
#     2016/04/10: 支持基于dfw实现穿透N层跳板机执行一次性命令
#                 (支持rsa/passwd验证方式)
#     2016/05/10: 支持通过环境变量传递password，提高安全
#     2019/02/19: 默认使用home目录下的配置，提高灵活性
#                 eval赋值计算中，值部分补充单引号，增强可用性
#
############################################################

# help
function help()
{
    echo "Usage: drun [ options ] host"
    echo "Options:"
    echo "  -c, --cmd=<COMMAND> COMMAND to run on remote and exit."
    echo "  -h, --help          Print this message and exit."
    echo ""
    echo "Report bugs to <ku7d@qq.com>"
}

# drun --cmd=<cmd> host
cmdline_cmd=""
cmdline_host=""

# parse cmdline
dlog debug "origin-args:[$@]"
temp=$(getopt -o "c:h" --long "cmd:,help" -n "drun" -- "$@")
if [ $? != 0 ] ; then
    echo "`help`" >&2
    exit 1
fi
eval set -- "$temp"
dlog debug "parsed-args:[$temp]"
while true
do
    case "$1" in
        -c|--cmd) cmdline_cmd="$2" ;  shift 2 ;;
        -h|--help) echo "`help`" >&2; exit 0;;
        --) shift ; break ;;
        *)  echo "parse options error!" >&2 ; exit 1 ;;
    esac
done
cmdline_host="$1"
dlog debug "host:[$cmdline_host], cmd:[$cmdline_cmd]"

# load host config
host=$cmdline_host
hosts=$HOME/doxrc_hosts
hname=; htype=; haddr=; hport=; huser=; hpass=; hproxys=;
eval `grep -v -E '^#|^$' $hosts 2>/dev/null                \
      | grep $cmdline_host 2>/dev/null                     \
      | head -n1                                           \
      | awk '{printf "hname='\''%s'\''; htype='\''%s'\'';  \
                      haddr='\''%s'\''; hport='\''%s'\'';  \
                      huser='\''%s'\''; hpass='\''%s'\'';  \
                      hproxys='\''%s'\'';"                 \
                     , $1, $2                              \
                     , $3, $4                              \
                     , $5, $6                              \
                     , $7}'`

if [    -z "$hname" -o -z "$htype" \
     -o -z "$haddr" -o -z "$hport" \
     -o -z "$huser" -o -z "$hpass" ] ; then
    dlog error "check host config fail,"         \
               "hname:[$hname], htype:[$htype]," \
               "haddr:[$haddr], hport:[$hport]," \
               "huser:[$huser], hpass:[$hpass]"
    exit 1
fi
dlog debug "load host config succ,"          \
           "hname:[$hname], htype:[$htype]," \
           "haddr:[$haddr], hport:[$hport]," \
           "huser:[$huser], hpass:[$hpass]," \
           "hproxys:[$hproxys]"

# make tcp forwarding with dfw
tmp=/tmp/.doxtmp_$USER.$RANDOM
dfw --verbose $host > $tmp
if [ $? != 0 ] ; then
    dlog error "dfw fail, host:[$host]"
    rm -f $tmp
    exit 1
fi
llist="`cat $tmp`"
laddr="`echo "$llist" | tail -n1 | cut -d: -f1`"
lport="`echo "$llist" | tail -n1 | cut -d: -f2`"
dlog debug "dfw succ, host:[$host], tmpfile:[$tmp]," \
           ", llist:[$llist], laddr:[$laddr], lport:[$lport]"
rm -f $tmp

# run command
case "$htype" in
    rsa)
        ssh -o PasswordAuthentication=no -o StrictHostKeyChecking=no \
            -i $hpass -p $lport $huser@$laddr "$cmdline_cmd"
        ;;
    passwd)
        DOX_DSSH_PASSWORD="$hpass" \
        dssh $huser "" $laddr $lport "$cmdline_cmd"
        ;;
    *)
        echo "host type unsupported, type:[$htype]," \
             "supported type:[rsa, passwd]"
        ;;
esac
