#!/usr/bin/expect --
# vim:ts=4:sw=4:expandtab

#######################################################################
# NAME
#     dssh2 - dox's ssh tool for login remote host with 2 proxy
#             [ and run command ]
#
# SYNOPSIS
#     dssh2 proxy1_username proxy1_password proxy1_hostname proxy1_hostport \
#           proxy2_username proxy2_password proxy2_hostname proxy2_hostport \
#           remote_username remote_password remote_hostname remote_hostport \
#           [ remote_command ]
#
# AUTHORS
#     neiku project <ku7d@qq.com> 
#
# SEE ALSO
#     dgo
#     ssh
#     expect --help
#
# VERSION
#     2016/04/01: 支持使用ssh+2层跳板机登录远程机器
#                 支持登录后执行一次命令，并马上退出
#
#######################################################################

# proxy1 host config
set proxy1_username   "[lindex $argv 0]"
set proxy1_password   "[lindex $argv 1]"
set proxy1_hostname   "[lindex $argv 2]"
set proxy1_hostport   "[lindex $argv 3]"

# proxy2 host config
set proxy2_username   "[lindex $argv 4]"
set proxy2_password   "[lindex $argv 5]"
set proxy2_hostname   "[lindex $argv 6]"
set proxy2_hostport   "[lindex $argv 7]"

# remote host config
set remote_username  "[lindex $argv 8]"
set remote_password  "[lindex $argv 9]"
set remote_hostname  "[lindex $argv 10]"
set remote_hostport  "[lindex $argv 11]"

# command to run on remote host
set remote_command   "[lindex $argv 12]"

# expect config
set timeout -1

if { $proxy1_username == "" } {
    send_user "Usage: dssh2 proxy1_username proxy1_password porxy_hostname proxy1_hostport\n"
    send_user "             proxy2_username proxy2_password porxy_hostname proxy2_hostport\n"
    send_user "             remote_username remote_password remote_hostname remote_hostport\n"
    send_user "             \[ remote_command \]\n"
    exit
}

send_user "ssh login to $remote_username@$remote_hostname"
send_user " via $proxy1_username@$proxy1_hostname and $proxy2_username@$proxy2_hostname"
send_user " with command '$remote_command'\n"
spawn -noecho ssh -t -p$proxy1_hostport $proxy1_username@$proxy1_hostname \
              ssh -t -p$proxy2_hostport $proxy2_username@$proxy2_hostname \
              ssh -p$remote_hostport $remote_username@$remote_hostname $remote_command

# expect for proxy
expect {
    # say 'yes' for the first connection (passwd)
    "(yes/no)?" {
        send "yes\r"

        # now ask for password
        expect "password:"
        send "$proxy1_password\r"
    }

    # ask for password on non-first connection (passwd)
    "password:" {
        send "$proxy1_password\r"
    }

    # for login shell (rsa), \\$ is special for rsa/passwd
    -re "#|>|\\$" {
        interact
        exit
    }

    # for exit (rsa)
    eof {
        exit
    }

    # error occurred, then exit
    "ssh" {
        exit
    }
}

# expect for proxy2
expect {
    # say 'yes' for the first connection (passwd)
    "(yes/no)?" {
        send "yes\r"

        # now ask for password
        expect "password:"
        send "$proxy2_password\r"
    }

    # ask for password on non-first connection (passwd)
    "password:" {
        send "$proxy2_password\r"
    }

    # for login shell (rsa), \\$ is special for rsa/passwd
    -re "#|>|\\$" {
        interact
        exit
    }

    # for exit (rsa)
    eof {
        exit
    }

    # error occurred, then exit
    "ssh" {
        exit
    }
}

# expect for remote
expect {
    # say 'yes' for the first connection (passwd)
    "(yes/no)?" {
        send "yes\r"

        # now ask for password
        expect "password:"
        send "$remote_password\r"
    }

    # ask for password on non-first connection (passwd)
    "password:" {
        send "$remote_password\r"
    }

    # for login shell (rsa), \\$ is special for rsa/passwd
    -re "#|>|\\$" {
        interact
        exit
    }

    # for exit (rsa)
    eof {
        exit
    }

    # error occurred, then exit
    "ssh" {
        exit
    }
}

interact
exit
