##########################################################
# 一个C/C++公共的Makefile - neiku
# 2012年 11月 11日 星期日 19:52:49 CST
#
# change log:
# 2012/11/14:
#             (1) 加入自定义头文件目录特性
# 2013/02/22:
#             (2) 加入32/64位架构代码编译选项
# 2013/03/03:
#             (1) 加入.a归档文件编译规则
#                 自动支持32/64位的.o文件的归档
#             (2) 64位的so要求.o的编译期加入-fPIC选项
#                 这会导致最終.o, so的体积会比32位的大一点
# 2014/09/20: 
#             (1) 环境变量存在性检测
#             (2) 支持32/64交叉编译，默认以当前环境类型进行编译
# 2016/07/20: 
#             (1) 只保留编译规则
#             (2) 编译配置由项目makefile提供
#             (3) 项目makefile使用neiku_config工具管理配置
#             (4) 编译配置包含头文件、库文件、源文件配置
# 2016/07/25: 
#             (1) 源文件配置使用SRCS变量，隐藏make内置的VPATH变量
#
# bug fix:
# 2012/11/14: 
#             修复需多文件链接时, 使用错误的内置变量.
#             $^表示所有依赖, 而$<表示第一个依赖, 在链接时应该使用$^.
# 2013/03/03:
#             64位的so要求.o的编译期加入-fPIC选项
#             这会导致最終.o, so的体积会比32位的大一点
#
##########################################################

# 编译配置
# --------------------------------------------------------------
INCS  = # 头文件配置，例如: -I/path/to/include
LIBS  = # 库文件配置，例如: -L/path/to/library -lname
SRCS  = # 源文件配置，例如: /path/to/src/

VPATH += ${SRCS} # make内置的源文件目录配置

# 编译规则
# --------------------------------------------------------------
.SUFFIXES: .o .cpp .c .so .a
.o.a:
	ar -r lib$@ $^
.o.so:
	g++ -fPIC -shared -o lib$@ $^ ${LIBS}
.c.o:
	gcc -g -fPIC -Wall -o $@ -c $^ ${INCS}
.cpp.o:
	g++ -std=c++11 -g -O2 -fPIC -Wno-deprecated -Wall -c $^ ${INCS}
.o:
	g++ -g -o $@ $^ ${LIBS}

# 项目makefile示例
# --------------------------------------------------------------
# include $(shell neiku_config --conf makefile.neiku)
# 
# INCS = $(shell neiku_config --incs <name>) \
#         -I/path/to/include/
#
# LIBS = $(shell neiku_config --libs <name>) \
#         -L/path/to/library/ -l<name>
#
# SRCS = /path/to/src/
# 
# OUTPUT= helloworld
#
# ALL: ${OUTPUT}
#
# helloworld: helloworld.o
# 
# clean:
# 	rm -f ${OUTPUT} *.o *.a *.so
# --------------------------------------------------------------
